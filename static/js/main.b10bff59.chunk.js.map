{"version":3,"sources":["store.js","Cards.js","Pagination.js","UserList.js","App.js","serviceWorker.js","index.js"],"names":["setActivePage","value","type","getUsers","state","users","getUsersLength","length","getActivePage","activePage","getUsersOnPage","usersOnPage","store","createStore","action","connect","usersLength","dispatch","changeActivePage","start","end","className","map","user","i","name","surname","desc","buttons","Array","Math","ceil","fill","handleCHangegPage","event","console","log","target","innerText","onClick","button","loadUsers","setUsers","loadedUsers","uploadUsers","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b10bff59.chunk.js","sourcesContent":["import { createStore } from 'redux';\n\nconst SET_USERS = 'SET_USERS';\nconst SET_ACTIVEPAGE = 'SET_ACTIVEPAGE';\n\nexport const setUsers = value => ({\n  type: SET_USERS, value\n});\n\nexport const setActivePage = value => ({\n  type: SET_ACTIVEPAGE, value\n});\n\nexport const getUsers = state => state.users;\nexport const getUsersLength = state => state.users.length;\nexport const getActivePage = state => state.activePage;\nexport const getUsersOnPage = state => state.usersOnPage;\n\n\nconst initialState = {\n  users: [],\n  activePage: 1,\n  usersOnPage: 5,\n}\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case SET_USERS: \n      return {\n        ...state,\n        users: action.value,\n      }\n    case SET_ACTIVEPAGE:\n      return {\n        ...state,\n        activePage: action.value,\n      }\n      default:\n        return state;\n  }\n}\n\nconst store = createStore(reducer, initialState);\n\nexport default store;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  getUsersLength,\n  getUsers,\n  getActivePage,\n  getUsersOnPage,\n  setActivePage\n} from './store'\n\nconst Cards = ({ users, usersLength, activePage, usersOnPage }) => {\n  const start = activePage * usersOnPage - usersOnPage + 1;\n  const end = activePage * usersOnPage >= usersLength\n    ? usersLength\n    : activePage * usersOnPage\n\n  return (\n    <>\n      \n      <div className=\"cards-box\">\n        {users.map((user, i) => (\n          i + 1 >= start && i + 1 <= end\n           && (\n              <div className='card'>\n                <p className='name'>\n                  {`${user.name} ${user.surname}`}\n                </p>\n                <p>{user.desc}</p>\n              </div>\n           )\n        ))}\n        \n      </div>\n      <p className='count'>\n        {`${start} - ${end} of ${usersLength} users`}\n      </p>\n    </>\n  )\n}\n\nconst getExtraData = state => ({\n  users: getUsers(state),\n  usersLength: getUsersLength(state),\n  activePage: getActivePage(state),\n  usersOnPage: getUsersOnPage(state)\n})\n\nconst getExtraMethods = dispatch => ({\n  changeActivePage: value => dispatch(setActivePage(value)),\n})\n\nexport default connect(\n  getExtraData,\n  getExtraMethods\n)(Cards);","import React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  getUsersLength,\n  getActivePage,\n  getUsersOnPage,\n  setActivePage\n} from './store'\n\n\nconst Pagination = ({\n  usersLength,\n  activePage,\n  usersOnPage,\n  changeActivePage\n}) => {\n  const buttons = Array(Math.ceil(usersLength/usersOnPage))\n    .fill('');\n\n  const handleCHangegPage = (event) => {\n    console.log(event.target.innerText);\n    \n    if(event.target.innerText === \"Next\") {\n      changeActivePage(activePage+1 > buttons.length \n        ? buttons.length \n        : activePage+1)\n    } else if(event.target.innerText === \"Prev\") {\n      changeActivePage(activePage-1 < 1 ? 1 : activePage-1)\n    } else {\n      changeActivePage(+event.target.innerText)\n    }\n  }\n  return (\n    <div>\n      <button\n        onClick={handleCHangegPage}\n        className='button'\n      >\n        Prev\n      </button>\n      {buttons.map((button, i) => (\n        <button \n          onClick={handleCHangegPage}\n          className={activePage === i+1 \n            ? 'button button--active'\n            : 'button'\n          }\n        >\n          {i+1}\n        </button>\n      ))}\n      <button\n        onClick={handleCHangegPage}\n        className='button'\n      >\n        Next\n      </button>\n    </div>\n  )\n\n}\n\nconst getExtraData = state => ({\n  usersLength: getUsersLength(state),\n  activePage: getActivePage(state),\n  usersOnPage: getUsersOnPage(state)\n})\n\nconst getExtraMethods = dispatch => ({\n  changeActivePage: value => dispatch(setActivePage(value)),\n})\n\nexport default connect(\n  getExtraData,\n  getExtraMethods\n)(Pagination);\n","import React from 'react';\nimport Cards from './Cards'\nimport Pagination from './Pagination'\nimport { connect } from 'react-redux';\nimport { uploadUsers } from './App'\nimport { setUsers, setActivePage, getUsers } from './store'\n\nconst UserList = ({ users, loadUsers }) => {\n\n  const handleClick = () => {\n    const loadedUsers = uploadUsers()\n    loadUsers(loadedUsers)\n  }\n\n  return (\n    <div>\n      {users.length === 0\n        && (\n          <button\n            type=\"button\"\n            className='load-button'\n            onClick={handleClick}\n          >\n            Click to load Users\n          </button>\n        )}\n      {users.length !== 0\n        &&\n        <div>\n          <h1 className='header'>users</h1>\n          <Cards />\n          <Pagination />\n        </div>\n      }\n    </div>\n  )\n}\n\nconst getExtraData = state => ({\n  users: getUsers(state)\n})\n\nconst getExtraMethods = dispatch => ({\n  loadUsers: value => dispatch(setUsers(value)),\n  changeActivePage: value => dispatch(setActivePage(value)),\n})\n\nexport default connect(\n  getExtraData,\n  getExtraMethods\n)(UserList);\n","import React from 'react';\nimport './App.css';\nimport UsersList from './UserList'\nimport users from './data/usersList'\n\nexport const uploadUsers = () => {\n  return users['users']\n};\n\nconst App = () => (\n  <div className=\"App\">\n    <UsersList />\n  </div>\n);\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}